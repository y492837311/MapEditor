using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;

namespace MapEditor
{
    public static class MapDataExporter
    {
        public static bool ExportToPNG(MapDataAsset mapData, string filePath, bool includeBackground = false)
        {
            if (mapData == null)
            {
                Debug.LogError("No map data to export");
                return false;
            }

            try
            {
                Texture2D exportTexture = mapData.GetRenderTexture();

                if (includeBackground && mapData.backgroundTexture != null)
                {
                    // 合并背景和颜色地图
                    exportTexture = MergeWithBackground(mapData);
                }

                // 确保目录存在
                string directory = Path.GetDirectoryName(filePath);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // 导出为PNG
                byte[] pngData = exportTexture.EncodeToPNG();
                File.WriteAllBytes(filePath, pngData);

                // 清理临时纹理
                if (includeBackground && exportTexture != mapData.GetRenderTexture())
                {
                    Object.DestroyImmediate(exportTexture);
                }

                Debug.Log($"Map exported to: {filePath}");
                return true;
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Failed to export PNG: {e.Message}");
                return false;
            }
        }

        private static Texture2D MergeWithBackground(MapDataAsset mapData)
        {
            Texture2D result = new Texture2D(mapData.width, mapData.height, TextureFormat.RGBA32, false);
            Color32[] colorPixels = mapData.GetRenderTexture().GetPixels32();
            Color32[] backgroundPixels = mapData.backgroundTexture.GetPixels32();

            // 调整背景图大小（如果需要）
            if (backgroundPixels.Length != colorPixels.Length)
            {
                // 这里可以实现背景图缩放逻辑
                Debug.LogWarning("Background size doesn't match map size. Background scaling not implemented.");
                return mapData.GetRenderTexture();
            }

            // 合并像素：颜色地图的透明部分显示背景
            for (int i = 0; i < colorPixels.Length; i++)
            {
                if (colorPixels[i].a == 0)
                {
                    // 完全透明，显示背景
                    result.SetPixel(i % mapData.width, i / mapData.width, backgroundPixels[i]);
                }
                else if (colorPixels[i].a < 255)
                {
                    // 半透明，混合颜色
                    Color blended = Color.Lerp(backgroundPixels[i], colorPixels[i], colorPixels[i].a / 255f);
                    result.SetPixel(i % mapData.width, i / mapData.width, blended);
                }
                else
                {
                    // 不透明，显示颜色
                    result.SetPixel(i % mapData.width, i / mapData.width, colorPixels[i]);
                }
            }

            result.Apply();
            return result;
        }

        public static bool ExportToConfig(MapDataAsset mapData, string filePath)
        {
            if (mapData == null)
            {
                Debug.LogError("No map data to export");
                return false;
            }

            try
            {
                // 创建配置文件内容
                StringBuilder configBuilder = new StringBuilder();
                
                // 文件头
                configBuilder.AppendLine("# Map Color Block Configuration");
                configBuilder.AppendLine($"# Generated by Map Editor on {System.DateTime.Now}");
                configBuilder.AppendLine($"# Map Size: {mapData.width}x{mapData.height}");
                configBuilder.AppendLine();
                
                // 颜色块定义
                configBuilder.AppendLine("[ColorBlocks]");
                foreach (var block in mapData.colorBlocks)
                {
                    configBuilder.AppendLine($"{block.id}:{ColorToHex(block.color)}:{block.name}");
                }
                
                configBuilder.AppendLine();
                
                // 像素数据
                configBuilder.AppendLine("[PixelData]");
                configBuilder.AppendLine("# Format: x,y,block_id");
                
                for (int y = 0; y < mapData.height; y += 1) // 可以调整步长来减少数据量
                {
                    for (int x = 0; x < mapData.width; x += 1)
                    {
                        var pixel = mapData.GetGridPixel(x, y);
                        if (pixel.blockId != 0)
                        {
                            configBuilder.AppendLine($"{x},{y},{pixel.blockId}");
                        }
                    }
                }

                // 写入文件
                File.WriteAllText(filePath, configBuilder.ToString());
                
                Debug.Log($"Config exported to: {filePath}");
                return true;
            }
            catch (System.Exception e)
            {
                Debug.LogError($"Failed to export config: {e.Message}");
                return false;
            }
        }

        private static string ColorToHex(Color color)
        {
            return $"#{ColorUtility.ToHtmlStringRGB(color)}";
        }

        public static void ExportWithDialog(MapDataAsset mapData, ExportFormat format)
        {
            string extension = format == ExportFormat.PNG ? "png" : "txt";
            string defaultName = mapData != null ? mapData.name : "UntitledMap";
            
            string filePath = EditorUtility.SaveFilePanel(
                $"Export Map as {format}",
                "Assets",
                defaultName,
                extension);

            if (!string.IsNullOrEmpty(filePath))
            {
                bool success = false;
                
                switch (format)
                {
                    case ExportFormat.PNG:
                        success = ExportToPNG(mapData, filePath);
                        break;
                    case ExportFormat.OriginalConfig:
                        success = ExportToConfig(mapData, filePath);
                        break;
                }

                if (success)
                {
                    // 刷新项目窗口（如果导出到Assets目录）
                    if (filePath.StartsWith(Application.dataPath))
                    {
                        AssetDatabase.Refresh();
                    }
                    
                    EditorUtility.DisplayDialog("Export Successful", 
                        $"Map exported successfully to:\n{filePath}", "OK");
                }
                else
                {
                    EditorUtility.DisplayDialog("Export Failed", 
                        "Failed to export map. Check console for details.", "OK");
                }
            }
        }
    }
}